{
	"swagger": "2.0",
	"info": {
		"title": "Pozyx location api",
		"description": "The pozyx location api can be used by the client who requires a more customizable application. The general idea of the basic platform is to consult tags within an environment. To do this there are several items needed. All these items are listed in this api. The api provides a lot of possible functions on every aspect of the application.The enitities: anchor, tag, position, label, zone, environment and zone-border point can be consulted, added, altered and deleted through this api.",
		"termsOfService": "http://pozyx.io/api/termsOfService",
		"contact": {
			"name": "Pozyx",
			"url": "http://www.pozyx.io",
			"email": "info@pozyx.io"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		},
		"version": "0.0.1"
	},
	"host": "localhost:8080",
	"basePath": "/api",
	"schemes": [
		"http"
	],
	"paths": {
		"/anchor/{anchorID}": {
			"x-swagger-router-controller": "anchor",
			"get": {
				"tags": [
					"Anchor"
				],
				"operationId": "getAnchorById",
				"description": "Returns the anchor with the provided ID. The ID is a unique value for every anchor. The anchor is the object that is static and makes it possible to calculate the position of a tag.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding anchor for the given ID.",
						"schema": {
							"$ref": "#/definitions/Anchor"
						}
					},
					"409": {
						"description": "The given ID could not be found or could not be removed properly.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Anchor"
				],
				"operationId": "removeAnchorById",
				"description": "Removes the anchor with the provided ID. The ID is a unique value for every anchor. The anchor is the object that is static and makes it possible to calculate the position of a tag.",
				"responses": {
					"204": {
						"description": "The corresponding anchor for the given ID is removed."
					},
					"409": {
						"description": "The given ID could not be found or the anchor could not be removed properly."
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "anchorID",
				"in": "path",
				"description": "Anchor ID",
				"required": true,
				"type": "integer",
				"format": "int64"
			}]
		},
		"/anchor/name/{anchor_name}": {
			"x-swagger-router-controller": "anchor",
			"get": {
				"tags": [
					"Anchor"
				],
				"operationId": "getAnchorByName",
				"description": "Returns the anchor with the provided name. The name is a unique value for every anchor. The anchor is the object that is static and makes it possible to calculate the position of a tag.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding anchor for the given name.",
						"schema": {
							"$ref": "#/definitions/Anchor"
						}
					},
					"409": {
						"description": "The given name could not be found or the anchor could not be fetched properly."
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "anchor_name",
				"in": "path",
				"description": "Anchor name",
				"required": true,
				"type": "string"
			}]
		},
		"/anchor": {
			"x-swagger-router-controller": "anchor",
			"get": {
				"tags": [
					"Anchor"
				],
				"operationId": "getAllAnchors",
				"description": "This call gives all the defined anchors in every environment.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Returns every anchors.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Anchor"
							}
						}
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Anchor"
				],
				"operationId": "updateAnchor",
				"description": "Updates the anchor that is submitted in the body of this request.",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "anchor",
					"in": "body",
					"description": "The anchor to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Anchor"
					}
				}],
				"responses": {
					"200": {
						"description": "The anchor is altered."
					},
					"409": {
						"description": "The anchor could not be altered properly."
					}
				}
			},
			"post": {
				"tags": [
					"Anchor"
				],
				"operationId": "addAnchor",
				"description": "Add the anchor to the list of anchors.",
				"consumes": [
						"application/json",
						"text/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "Add an anchor to collection",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Anchor"
						}
				}],
				"responses": {
					"200": {
						"description": "The corresponding anchor for the given ID.",
						"schema": {
							"$ref": "#/definitions/Anchor"
						}
					},
					"409": {
						"description": "The given ID could not be found or the anchor could not be added properly."
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			}
		},
		"/environment/anchor/{environmentID}": {
			"x-swagger-router-controller": "anchor",
			"get": {
				"tags": [
					"Anchor",
					"Environment"
				],
				"operationId": "getAnchorsForEnvironment",
				"description": "This call returns all the defined anchors in the environment with the given environment ID as parameter.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "All the anchors situated in environment with environmentID equal to the given ID.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Anchor"
							}
						}
					},
					"409": {
						"description": "The given ID could not be found."
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "environmentID",
				"in": "path",
				"description": "The ID of the environment.",
				"required": true,
				"type": "integer"
			}]
		},
		"/tag/{tagID}": {
			"x-swagger-router-controller": "tag",
			"get": {
				"tags": [
					"Tag"
				],
				"operationId": "getTagById",
				"description": "Returns the tag with the provided ID. The ID is a unique value for every tag. The tag is the object for which a location can be calulated.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding tag for the given ID.",
						"schema": {
							"$ref": "#/definitions/Tag"
						}
					},
					"409": {
						"description": "The given ID could not be found or could not be removed properly.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					},
					"default": {
						"description": "Tag couldn't be consulted.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Tag"
				],
				"operationId": "removeTagById",
				"description": "Removes the tag with the provided ID. The ID is a unique value for every tag. The tag is the object for which a location can be calulated.",
				"responses": {
					"204": {
						"description": "The corresponding tag for the given ID is removed."
					},
					"409": {
						"description": "The given ID could not be found or the tag could not be removed properly."
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Tag"
				],
				"operationId": "updateTagById",
				"description": "Updates the tag with the given ID to the tag that is submitted in the body of this request.",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "tag_value",
					"in": "body",
					"description": "The tag to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Tag"
					}
				}],
				"responses": {
					"200": {
						"description": "The corresponding tag for the given ID.",
						"schema": {
							"$ref": "#/definitions/Tag"
						}
					},
					"409": {
						"description": "The given ID could not be found or the tag could not be altered properly."
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "tagID",
				"in": "path",
				"description": "Tag ID",
				"required": true,
				"type": "integer",
				"format": "int64"
			}]
		},
		"/tag/name/{tag_name}": {
			"x-swagger-router-controller": "tag",
			"get": {
				"tags": [
					"Tag"
				],
				"operationId": "getTagByName",
				"description": "Returns the tag with the provided name. The name is a unique value for every tag.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding tag for the given name.",
						"schema": {
							"$ref": "#/definitions/Tag"
						}
					},
					"409": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "tag_name",
				"in": "path",
				"description": "Tag name",
				"required": true,
				"type": "string"
			}]
		},
		"/tag": {
			"x-swagger-router-controller": "tag",
			"get": {
				"tags": [
					"Tag"
				],
				"operationId": "getAllTags",
				"description": "This call gives all the defined tags in every environment.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Returns the defined tags.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Tag"
							}
						}
					},
					"default": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Tag"
				],
				"operationId": "addTag",
				"description": "Add the anchor to the list of anchors.",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "tag_value",
					"in": "body",
					"description": "The tag to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Tag"
					}
				}],
				"responses": {
					"200": {
						"description": "The corresponding tag for the given ID.",
						"schema": {
							"$ref": "#/definitions/Tag"
						}
					},
					"409": {
						"description": "The tag could not be added.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			}
		},
		"/tag/label/{tagID}": {
			"x-swagger-router-controller": "label",
			"get": {
				"tags": ["Tag","Label"],
				"operationId": "getLabelsForTag",
				"description": "This call gives all the defined labels corresponding to the tag.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Returns the defined labels.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Label"
							}
						}
					},
					"409": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"post": {
				"tags": ["Tag","Label"],
				"operationId": "addLabelsToTag",
				"description": "This call adds a label to the tag with the given id.",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "label",
					"in": "body",
					"description": "The label to add to the tag.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Label"
					}
				}],
				"responses": {
					"200": {
						"description": "Returns the id of the defined label.",
						"schema": {
							"type": "integer"
						}
					},
					"409": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "tagID",
				"in": "path",
				"description": "The tag to search labels from.",
				"required": true,
				"type": "integer"
			}]
		},
		"/tag/label/{tagID}/{labelID}": {
			"x-swagger-router-controller": "label",
			"delete": {
				"tags": ["Tag","Label"],
				"operationId": "removeTagLabel",
				"description": "Remove the label from the tag.",
				"produces": [
					"application/json"
				],
				"responses": {
					"204": {
						"description": "Tag and label combination is removed.."
					},
					"409": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "tagID",
				"in": "path",
				"description": "The tag where the label should be removed from.",
				"required": true,
				"type": "integer"
			},
			{
				"name":"labelID",
				"in":"path",
				"description":"The label to remove from the id.",
				"required":true,
				"type":"integer"
			}]
		},
		"/environment/tag/{environmentID}": {
			"x-swagger-router-controller": "tag",
			"get": {
				"tags": [
					"Tag",
					"Environment"
				],
				"operationId": "getTagsForEnvironment",
				"description": "This call gives all the defined anchors in the environment with the given ID as parameter.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "All the anchors situated in environment with environmentID equal to the given ID.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Tag"
							}
						}
					},
					"404": {
						"description": "Tags couldn't be loaded.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "environmentID",
				"in": "path",
				"description": "ID of the specific environment",
				"required": true,
				"type": "integer"
			}]
		},
		"/zone/point/{zoneID}": {
			"x-swagger-router-controller": "zone",
			"get": {
				"tags": ["Zone"],
				"operationId": "getBorderPointsFromZone",
				"description": "Returns all the points that define the zone.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding points for the given zone.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ZoneBorderPoint"
							}
						}
					},
					"409": {
						"description": "The given zone could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"post":{
				"tags": ["Zone"],
				"operationId":"addBorderpointsToZone",
				"description": "Adds an array of points to the zone with the id.",
				"produces": [
					"application/json"
				],
				"parameters":[{
					"name": "point_list",
					"in": "body",
					"schema": {
						"type":"array",
						"items":{
							"$ref":"#/definitions/ZoneBorderPoint"
						}
					}
				}],
				"responses": {
					"200": {
						"description": "The points are added correctly to the zone. The id of the last point is returned.",
						"schema":{
							"type": "integer",
							"format":"int64"
						}
					},
					"409":{
						"description": "The points couldn't be added.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "zoneID",
				"in": "path",
				"description": "The zoneID to where the points are searched for.",
				"required": true,
				"type": "string"
			}]
		},
		"/zone/{zoneID}": {
			"x-swagger-router-controller": "zone",
			"get": {
				"tags": ["Zone"],
				"operationId": "getZoneById",
				"description": "Returns the zone with the given ID.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding zone for the given ID.",
						"schema": {
							"$ref": "#/definitions/Zone"
						}
					},
					"409": {
						"description": "The given ID could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"delete": {
				"tags": ["Zone"],
				"operationId": "removeZoneById",
				"description": "Removes the zone with the provided ID. The ID is a unique value for every zone. The zone is a logical part of an environment.",
				"responses": {
					"204": {
						"description": "The corresponding zone for the given ID is removed. The border points are removed in cascade."
					},
					"409": {
						"description": "The given ID could not be found or the zone could not be removed properly."
					}
				}
			},
			"parameters": [{
				"name": "zoneID",
				"in": "path",
				"description": "The tag to update",
				"required": true,
				"type": "string"
			}]
		},
		"/zone": {
			"x-swagger-router-controller": "zone",
			"post": {
				"tags": ["Zone"],
				"operationId": "addZone",
				"description": "Adds a zone to the collection of all the zones. The id provided in the object is not used.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
 						"description": "The zone is added succesfully. The correct id is returned.",
 						"schema" : {
	 						"type" : "integer",
	 						"format":"int64"
	 					}
					},
					"409": {
						"description": "The given zone could not be added."
					}
				}
			},
			"put": {
				"tags": ["Zone"],
				"operationId": "updateZone",
				"description": "Updates the zone with the given ID to the zone that is submitted in the body of this request.",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "zone",
					"in": "body",
					"description": "The zone to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Zone"
					}
				}],
				"responses": {
					"204": {
						"description": "The corresponding zone for the given ID is altered. The borderpoints didn't change."
					},
					"409": {
						"description": "The given ID could not be found or the zone could not be removed."
					}
				}
			},
			"parameters": [{
				"name": "zone",
				"in": "body",
				"description": "The zone to add.",
				"required": true,
				"schema": {
					"$ref": "#/definitions/Zone"
				}
			}]
		},
		"/environment/zone/{environmentID}": {
			"x-swagger-router-controller": "zone",
			"get": {
				"tags": ["Zone", "Environment"],
				"operationId": "getZoneForEnvironment",
				"description": "Returns the zones that belong to the given environment.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The zones that are situated in the environment.",
            "schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Zone"
							}
						}
					},
					"409": {
						"description": "The given ID could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "environmentID",
				"in": "path",
				"description": "The environment to seach in.",
				"required": true,
				"type": "string"
			}]
		},
		"/environment/point/{environmentID}": {
			"x-swagger-router-controller": "environment",
			"get": {
				"tags": ["Zone", "Point", "Environment"],
				"operationId": "getPointsByEnvironment",
				"description": "Returns the points that belong to the given environment. Searches through all the zones for borderpoints.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The points that are situated in the environment.",
            "schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ZoneBorderPoint"
							}
						}
					},
					"409": {
						"description": "The given environment/points could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "environmentID",
				"in": "path",
				"description": "The environment to seach in.",
				"required": true,
				"type": "string"
			}]
		},
		"/point": {
			"x-swagger-router-controller": "zone",
			"post": {
				"tags": ["Point"],
				"operationId": "addZoneBorderPoint",
				"description": "Adding a point that defines a zone. The provided ID will not be used to store the value. The used id is returned as result.",
				"parameters": [{
					"name": "point_value",
					"in": "body",
					"description": "The point to add",
					"required": true,
					"schema": {
						"$ref": "#/definitions/ZoneBorderPoint"
					}
				}],
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The point is added succesfully. The correct id is returned.",
						"schema" : {
							"type" : "integer",
							"format":"int64"
						}
					},
					"409": {
						"description": "The zone could not be found or the point could not be added.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"put": {
				"tags": ["Point"],
				"operationId": "updateZoneBorderPoint",
				"description": "Updates the point with the given ID to the point that is submitted in the body of this request.",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "point_value",
					"in": "body",
					"description": "The point to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/ZoneBorderPoint"
					}
				}],
				"responses": {
					"204": {
						"description": "The border point is changed."
					},
					"409": {
						"description": "The given ID could not be found or the point could not be removed."
					}
				}
			}
		},
		"/point/{zoneBorderPointID}": {
			"x-swagger-router-controller": "zone",
			"get": {
				"tags": ["Point"],
				"operationId": "getZoneBorderPointById",
				"description": "Returns the point with the given ID.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding point for the given ID.",
						"schema": {
							"$ref": "#/definitions/ZoneBorderPoint"
						}
					},
					"409": {
						"description": "The given ID could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"delete": {
				"tags": ["Point"],
				"operationId": "removeZoneBorderPointById",
				"description": "Removes the point with the provided ID. The ID is a unique value for every point. The points define a zone.",
				"responses": {
					"204": {
						"description": "The corresponding point for the given ID is removed."
					},
					"409": {
						"description": "The given ID could not be found."
					}
				}
			},
			"parameters": [{
				"name": "zoneBorderPointID",
				"in": "path",
				"description": "The point to update",
				"required": true,
				"type": "string"
			}]
		},
		"/label/{labelID}": {
			"x-swagger-router-controller": "label",
			"get": {
				"tags": ["Label"],
				"operationId": "getLabelById",
				"description": "Returns the label with the provided ID. The ID is a unique value for every label. The label is a method to group tags.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding label for the given ID.",
						"schema": {
							"$ref": "#/definitions/Label"
						}
					},
					"409": {
						"description": "The given ID could not be found or could not be removed properly.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"delete": {
				"tags": ["Label"],
				"operationId": "removeLabelById",
				"description": "Removes the label with the provided ID. The ID is a unique value for every label. The label is a method to group tags.",
				"responses": {
					"204": {
						"description": "The corresponding label for the given ID is removed."
					},
					"409": {
						"description": "The given ID could not be found or the label could not be removed properly."
					}
				}
			},
			"parameters": [{
				"name": "labelID",
				"in": "path",
				"description": "label ID",
				"required": true,
				"type": "integer",
				"format": "int64"
			}]
		},
		"/label/name/{label_name}": {
			"x-swagger-router-controller": "label",
			"get": {
				"tags": ["Label"],
				"operationId": "getLabelByName",
				"description": "Returns the label with the provided name. The name is a unique value for every label.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The corresponding label for the given name.",
						"schema": {
							"$ref": "#/definitions/Label"
						}
					},
					"409": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"parameters": [{
				"name": "label_name",
				"in": "path",
				"description": "label name",
				"required": true,
				"type": "string"
			}]
		},
		"/label": {
			"x-swagger-router-controller": "label",
			"get": {
				"tags": ["Label"],
				"operationId": "getAllLabels",
				"description": "This call gives all the defined labels.",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Returns the defined labels.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Label"
							}
						}
					},
					"409": {
						"description": "Something went wrong...",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"post": {
				"tags": ["Label"],
				"operationId": "addLabel",
				"description": "Add the label to the list of labels.",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "label_value",
					"in": "body",
					"description": "The label to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Label"
					}
				}],
				"responses": {
					"200": {
						"description": "The corresponding label for the given ID.",
						"schema": {
							"$ref": "#/definitions/Label"
						}
					},
					"409": {
						"description": "The label could not be added.",
						"schema": {
							"$ref": "#/definitions/ErrorModel"
						}
					}
				}
			},
			"put": {
				"tags": ["Label"],
				"operationId": "updateLabel",
				"description": "Updates the label with the given ID to the label that is submitted in the body of this request.",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "label_value",
					"in": "body",
					"description": "The label to update",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Label"
					}
				}],
				"responses": {
					"200": {
						"description": "The label was added succesfully."
					},
					"409": {
						"description": "The given ID could not be found or the label could not be altered properly."
					}
				}
			}
		},
		"/tag/position/{tagID}":{
	    "x-swagger-router-controller":"position",
	    "get":{
	      "tags":["Tag","Position"],
	      "operationId":"getPositionFromTag",
	      "description":"Returns the positions for the provided ID. The ID is a unique value for every tag. The positions are chronological events for a tag.",
	      "produces": [
	        "application/json"
	      ],
	      "responses": {
	        "200": {
	          "description": "The corresponding positions for the given ID.",
	          "schema": {
	              "type":"array",
	              "$ref": "#/definitions/Position"
	          }
	        },
	        "409":{
	          "description": "The given ID could not be found or could not be removed properly.",
	          "schema": {
	            "$ref":"#/definitions/ErrorModel"
	          }
	        }
	      }
	    },
	    "parameters": [
	      {
	        "name": "tagID",
	        "in":"path",
	        "description":"Tag ID",
	        "required":true,
	        "type":"integer",
	        "format":"int64"
	      }
	    ]
	  },
	  "/position/{positionID}":{
	    "x-swagger-router-controller":"position",
	    "get":{
	      "tags":["Position"],
	      "operationId":"getPositionById",
	      "description":"Returns the positions for the provided ID. The ID is a unique value for every tag. The positions are chronological events for a tag.",
	      "produces": [
	        "application/json"
	      ],
	      "responses": {
	        "200": {
	          "description": "The corresponding positions for the given ID.",
	          "schema": {
	              "$ref": "#/definitions/Position"
	          }
	        },
	        "409":{
	          "description": "The given ID could not be found.",
	          "schema": {
	            "$ref":"#/definitions/ErrorModel"
	          }
	        }
	      }
	    },
	    "delete":{
	      "tags":["Position"],
	      "operationId":"removePositionById",
	      "description":"Removes the position with the given ID.",
	      "produces":[
	        "application/json"
	      ],
	      "responses": {
	        "200": {
	          "description": "The position was deleted succesfully."
	        },
	        "409":{
	          "description": "The position could not be deleted.",
	          "schema": {
	            "$ref":"#/definitions/ErrorModel"
	          }
	        }
	      }
	    },
	    "parameters": [
	      {
	        "name": "positionID",
	        "in":"path",
	        "description":"Position ID",
	        "required":true,
	        "type":"integer",
	        "format":"int64"
	      }
	    ]
	  },
	  "/position":{
			"x-swagger-router-controller":"position",
	    "post":{
	      "tags":["Position"],
	      "operationId":"addPosition",
	      "description":"Ads the position to the collection of positions.",
	      "produces":[
	        "application/json"
	      ],
	      "parameters":[
	        {
	          "name": "position_value",
	          "in":"body",
	          "description":"The postion to add.",
	          "required":true,
	          "schema":{
	            "$ref":"#/definitions/Position"
	          }
	        }
	      ],
	      "responses": {
	        "200": {
	          "description": "The position was added succesfully."
	        },
	        "409":{
	          "description": "The position could not be added.",
	          "schema": {
	            "$ref":"#/definitions/ErrorModel"
	          }
	        }
	      }
	    }
	  },
		"/environment/{environmentID}":{
	    "x-swagger-router-controller":"environment",
	    "get":{
	      "tags":["Environment"],
	      "operationId":"getEnvironmentById",
	      "description":"Returns the environment for the provided ID. The ID is a unique value for every environment.",
	      "produces": [
	        "application/json"
	      ],
	      "responses": {
	        "200": {
	          "description": "The corresponding environment for the given ID.",
	          "schema": {
	              "$ref": "#/definitions/Environment"
	          }
	        },
	        "409":{
	          "description": "The given ID could not be found.",
	          "schema": {
	            "$ref":"#/definitions/ErrorModel"
	          }
	        }
	      }
	    },
			"parameters": [
				{
					"name": "environmentID",
					"in":"path",
					"description":"Environment ID",
					"required":true,
					"type":"integer",
					"format":"int64"
				}
			]
	  },
		"/environment":{
			"x-swagger-router-controller":"environment",
	    "put":{
	      "tags":["Environment"],
	      "operationId":"updateEnvironment",
	      "description":"Updates the environment given as parameter. The ID will be used to find the object to alter.",
	      "produces": [
	        "application/json"
	      ],
	      "responses": {
	        "200": {
	          "description": "The corresponding environment is updated."
	        },
	        "409":{
	          "description": "The given ID could not be found.",
	          "schema": {
	            "$ref":"#/definitions/ErrorModel"
	          }
	        }
	      }
	    },
			"post":{
	      "tags":["Environment"],
	      "operationId":"addEnvironment",
	      "description":"Adds the environment given as parameter. The ID is irrelevant and will be changed to the following ID that is free.",
	      "produces": [
	        "application/json"
	      ],
	      "responses": {
	        "200": {
	          "description": "The corresponding environment is updated."
	        },
	        "409":{
	          "description": "The given ID could not be found.",
	          "schema": {
	            "$ref":"#/definitions/ErrorModel"
	          }
	        }
	      }
	    },
			"parameters":[
				{
					"name":"environment",
					"in":"body",
					"description":"Environment to update.",
					"required":true,
					"schema":{
						"$ref":"#/definitions/Environment"
					}
				}
			]
		}
	},
	"definitions": {
		"Anchor": {
			"type": "object",
			"properties": {
				"anchorID": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				},
				"environmentID": {
					"type": "integer",
					"format": "int64"
				},
				"hardwareVersion": {
					"type": "string",
					"format": "byte"
				},
				"firmwareVersion": {
					"type": "string",
					"format": "byte"
				},
				"x": {
					"type": "integer",
					"format": "int32"
				},
				"y": {
					"type": "integer",
					"format": "int32"
				},
				"z": {
					"type": "integer",
					"format": "int32"
				},
				"last_seen": {
					"type": "string"
				},
				"status":{
					"type":"string",
					"format":"byte"
				}
			},
			"required": [
				"anchorID",
				"name"
			]
		},
		"Tag": {
			"type": "object",
			"properties": {
				"tagID": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				},
				"environmentID": {
					"type": "integer",
					"format": "int64"
				},
				"hardwareVersion": {
					"type": "string",
					"format": "byte"
				},
				"firmwareVersion": {
					"type": "string",
					"format": "byte"
				},
				"batteryLevel": {
					"type": "number",
					"format": "float"
				},
				"updateRate": {
					"type": "integer",
					"format": "int32"
				},
				"iconPath": {
					"type": "string"
				},
				"iconColor": {
					"type": "string"
				}
			},
			"required": [
				"tagID",
				"name"
			]
		},
		"ZoneBorderPoint": {
			"type": "object",
			"properties": {
				"zoneBorderPointID": {
					"type": "integer",
					"format": "int64"
				},
				"zoneID": {
					"type": "integer",
					"format": "int64"
				},
				"x": {
					"type": "integer",
					"format": "int32"
				},
				"y": {
					"type": "integer",
					"format": "int32"
				},
				"z": {
					"type": "integer",
					"format": "int32"
				}
			},
			"required": [
				"zoneBorderPointID",
				"zoneID",
				"x",
				"y",
				"z"
			]
		},
		"Zone": {
			"type": "object",
			"properties": {
				"zoneID": {
					"type": "integer",
					"format": "int64"
				},
				"environmentID": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				},
				"area": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"environmentID",
				"zoneID"
			]
		},
		"Label": {
			"type": "object",
			"properties": {
				"labelID": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"required": [
				"labelID",
				"name"
			]
		},
		"Position":{
	    "type":"object",
	    "properties":{
	      "positionID":{
	        "type":"integer",
	        "format":"int64"
	      },
	      "tagID":{
	        "type":"integer",
	        "format":"int64"
	      },
	      "x":{
	        "type":"integer",
	        "format": "int32"
	      },
	      "y":{
	        "type":"integer",
	        "format": "int32"
	      },
	      "z":{
	        "type":"integer",
	        "format": "int32"
	      }
	    },
	    "required":[
	      "positionID",
	      "tagID"
	    ]
	  },
		"Environment":{
	    "type":"object",
	    "properties":{
	      "environmentID":{
	        "type":"integer",
	        "format":"int64"
	      },
	      "name":{
	        "type":"string"
	      },
	      "description":{
	        "type":"string"
	      }
	    },
	    "required":[
	      "environmentID"
	    ]
	  },
		"ErrorModel": {
			"type": "object",
			"required": [
				"message"
			],
			"properties": {
				"message": {
					"type": "string"
				}
			}
		}
	}
}
